/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views.report;

import controllers.Category.CategoryController;
import controllers.Category.CategoryInterface;
import controllers.report.ReportController;
import controllers.report.ReportInterface;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import utils.CustomInternalJFrame;

/**
 *
 * @author jenif
 */
public class FrmReport extends javax.swing.JInternalFrame {

    private ReportInterface service;
    private CategoryInterface categoryService;
    ArrayList<String> categoriesList = new ArrayList<>();
    DefaultTableModel dtm = new DefaultTableModel();
    CustomInternalJFrame customizer;

    public FrmReport() {
        initComponents();
        service = new ReportController();
        categoryService = new CategoryController();
        String[] titulo = new String[]{"Codigo", "Descripcion", "Categoria", "Existencias",
            "Minimo", "Maximo"};
        dtm.setColumnIdentifiers(titulo);//Le agrega el los titulos a las columnas
        tbReport.setModel(dtm);
        fillCombo();

        JTableHeader header = tbReport.getTableHeader();
        header.setBackground(new Color(141, 67, 240));// Cambiar color de fondo
        header.setFont(new Font("Segoe UI", Font.BOLD, 12));
        header.setForeground(Color.WHITE);
        
        customizer = new CustomInternalJFrame();
        customizer.setOpacity(this, 180);
        customizer.setEliminatedBorder(this);
        customizer.enableDrag(this);
    }

    private void fillCombo() {
        allCcmb();
        if (!categoriesList.isEmpty()) {
            for (int i = 0; i < categoriesList.size(); i++) {
                this.cmbCategory.addItem(categoriesList.get(i));
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbReport = new javax.swing.JTable();
        rbtStockMinimo = new javax.swing.JRadioButton();
        rtbDescription = new javax.swing.JRadioButton();
        rtbCategory = new javax.swing.JRadioButton();
        cmbCategory = new javax.swing.JComboBox<>();
        txtDescription = new javax.swing.JTextField();
        btnGetAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rtbSpaceLimited = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        btnClean = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Reportes");

        btnReturn.setBackground(new java.awt.Color(141, 67, 240));
        btnReturn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Regresar");
        btnReturn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        tbReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbReport);

        rbtStockMinimo.setText("Prodctos por Stock Minimo");
        rbtStockMinimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtStockMinimoActionPerformed(evt);
            }
        });

        rtbDescription.setText("Productos por descripcion");
        rtbDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtbDescriptionActionPerformed(evt);
            }
        });

        rtbCategory.setText("Porductos por Categoria");
        rtbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtbCategoryActionPerformed(evt);
            }
        });

        cmbCategory.setEnabled(false);

        txtDescription.setEnabled(false);

        btnGetAll.setBackground(new java.awt.Color(141, 67, 240));
        btnGetAll.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGetAll.setForeground(new java.awt.Color(255, 255, 255));
        btnGetAll.setText("Mostrar Datos");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Busqueda");

        rtbSpaceLimited.setText("Productos con espacio limitado");
        rtbSpaceLimited.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtbSpaceLimitedActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fill p (1).png"))); // NOI18N

        btnClean.setBackground(new java.awt.Color(141, 67, 240));
        btnClean.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClean.setForeground(new java.awt.Color(255, 255, 255));
        btnClean.setText("Vaciar");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(315, 315, 315))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rtbDescription)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtStockMinimo)
                            .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rtbCategory)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rtbSpaceLimited))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnGetAll)
                                        .addGap(117, 117, 117)
                                        .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtStockMinimo)
                        .addGap(42, 42, 42)
                        .addComponent(rtbDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(rtbCategory)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(rtbSpaceLimited)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(btnGetAll)
                    .addComponent(btnClean))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        clearTable();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void rtbDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtbDescriptionActionPerformed
        // TODO add your handling code here:
        if (rtbDescription.isSelected()) {
            rtbSpaceLimited.setSelected(false);
            rtbCategory.setSelected(false);
            rbtStockMinimo.setSelected(false);
            this.setSearchFieldState(true, false);

        }
    }//GEN-LAST:event_rtbDescriptionActionPerformed

    private void rtbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtbCategoryActionPerformed
        // TODO add your handling code here:
        if (rtbCategory.isSelected()) {
            rtbSpaceLimited.setSelected(false);
            rtbDescription.setSelected(false);
            rbtStockMinimo.setSelected(false);
            this.setSearchFieldState(false, true);

        }
    }//GEN-LAST:event_rtbCategoryActionPerformed

    private void rbtStockMinimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtStockMinimoActionPerformed
        // TODO add your handling code here:
        if (rbtStockMinimo.isSelected()) {
            rtbSpaceLimited.setSelected(false);
            rtbCategory.setSelected(false);
            rtbDescription.setSelected(false);
            this.setSearchFieldState(false, false);

        }
    }//GEN-LAST:event_rbtStockMinimoActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        // TODO add your handling code here
        if (rtbCategory.isSelected()) {
            this.searchByCategory();
            btnGetAll.setEnabled(false);
        } else if (rbtStockMinimo.isSelected()) {
            this.searchByMinStock();
            btnGetAll.setEnabled(false);
        } else if (rtbSpaceLimited.isSelected()) {
            this.searchByLimitSpace();
            btnGetAll.setEnabled(false);
        } else if (rtbDescription.isSelected()) {
            this.searchByDescription();
             btnGetAll.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una opción de búsqueda!!!!", "Advertencia", 1);
        }
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void rtbSpaceLimitedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtbSpaceLimitedActionPerformed
        // TODO add your handling code here:
        if (rtbSpaceLimited.isSelected()) {
            rbtStockMinimo.setSelected(false);
            rtbCategory.setSelected(false);
            rtbDescription.setSelected(false);
            this.setSearchFieldState(false, false);
        }
        
    }//GEN-LAST:event_rtbSpaceLimitedActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        this.clear();
        this.clearTable();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void setSearchFieldState(boolean enableDescription, boolean enableCategory) {
        txtDescription.setEnabled(enableDescription);
        cmbCategory.setEnabled(enableCategory);
    }

    private boolean searchByLimitSpace() {
             String data[][] = service.listLimitSpaceP();
        if (data != null) {
            dtm.setRowCount(0);
            for (String[] row : data) {
                dtm.addRow(row);
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron productos con espacio limitado.", "Resultado de búsqueda", 1);
        }
        return false;
    }
    

   private void searchByDescription() {
    String descripcion = txtDescription.getText().trim();
    
    if (!descripcion.isEmpty()) {
        String[][] data = service.listProductosPorDescripcion(descripcion);
        
        if (data != null && data.length > 0) {
            dtm.setRowCount(0);  // Limpiar la tabla
            for (String[] row : data) {
                dtm.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron productos.", "Resultado de búsqueda", 1);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor ingrese una descripción.", "Error",2);
    }
}
   
   private boolean searchByMinStock(){
       String data[][] = service.listMinStockProducts();
        if (data != null) {
            dtm.setRowCount(0);
            for (String[] row : data) {
                dtm.addRow(row);
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron productos con stock minimo.", "Resultado de búsqueda", 1);
        }
        return false;
   }
   
   private boolean searchByCategory(){
       Integer id = allCcode((String)this.cmbCategory.getSelectedItem());
        String data[][] = service.getProductosPorCategoria(id);
        if (data != null) {
            dtm.setRowCount(0);
            for (String[] row : data) {
                dtm.addRow(row);
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron productos con esta categoria.", "Resultado de búsqueda", 1);
        }
        return false;
   }
   
   private void clear(){
        rbtStockMinimo.setSelected(false);
        rtbCategory.setSelected(false);
        rtbDescription.setSelected(false);
        rtbSpaceLimited.setSelected(false);
        txtDescription.setText("");
        btnGetAll.setEnabled(true);
    }
    
    private void clearTable() {
        dtm.setRowCount(0);
    }
    
    private Integer allCcode(String fullCat) {
        String data = "";
        String[][] all = categoryService.list();
        for (String[] allCat : all) {
            data = allCat[1] + " (" + allCat[0] + ")";
            if (data.equals(fullCat)) {
                Integer code = Integer.parseInt(allCat[0]);
                return code;
            }
        }
        return null;
    }
    
    private void allCcmb() {
        String[][] all = categoryService.list();
        for (String[] allCat : all) {
            categoriesList.add(allCat[1]+" ("+allCat[0]+")");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnReturn;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbtStockMinimo;
    private javax.swing.JRadioButton rtbCategory;
    private javax.swing.JRadioButton rtbDescription;
    private javax.swing.JRadioButton rtbSpaceLimited;
    private javax.swing.JTable tbReport;
    private javax.swing.JTextField txtDescription;
    // End of variables declaration//GEN-END:variables
}
